<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.test.quartz</groupId>
    <artifactId>quartz</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.13</version>
        </dependency>
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <version>1.3.7</version>
        </dependency>
        <!--spring boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
            <version>2.2.2.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <version>2.2.2.RELEASE</version>
            <exclusions>
                <exclusion>
                    <artifactId>log4j-api</artifactId>
                    <groupId>org.apache.logging.log4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-websocket</artifactId>
            <version>2.2.2.RELEASE</version>
            <exclusions>
                <exclusion>
                    <artifactId>log4j-api</artifactId>
                    <groupId>org.apache.logging.log4j</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>spring-boot-starter-logging</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <version>2.2.2.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <version>2.2.2.RELEASE</version>
        </dependency>
        <!--commons-lang -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
            <version>2.12.0</version>
            <exclusions>
                <exclusion>
                    <artifactId>netty</artifactId>
                    <groupId>io.netty</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>log4j</artifactId>
                    <groupId>log4j</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>guava</artifactId>
                    <groupId>com.google.guava</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-quartz</artifactId>
            <version>2.2.2.RELEASE</version>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.8.2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.16.0</version>
        </dependency>
    </dependencies>

    <build>
        <!--<finalName>${artifactId}-${version}</finalName>-->
        <!--<plugins>-->
        <!--<plugin>-->
        <!--<groupId>org.apache.maven.plugins</groupId>-->
        <!--<artifactId>maven-compiler-plugin</artifactId>-->
        <!--<configuration>-->
        <!--<source>1.8</source>-->
        <!--<target>1.8</target>-->
        <!--</configuration>-->
        <!--</plugin>-->
        <!--</plugins>-->
        <!--打包后的jar包名-->
        <finalName>${artifactId}-${version}</finalName>
        <plugins>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.2</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>target/jacoco.exec</dataFile>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <destFile>
                        target/jacoco.exec
                    </destFile>
                </configuration>
            </plugin>
            <!-- progurad-maven-plugin -->
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.0.11</version>
                <executions>
                    <execution>
                        <!--混淆阶段是package-->
                        <phase>package</phase>
                        <goals>
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <!--配置项-->
                <configuration>
                    <!--指定proguard的版本-->
                    <proguardVersion>6.0.3</proguardVersion>
                    <!--多模块项目打包重点一,添加依赖子模块到混淆范围,混淆后都会放在classes中-->
                    <assembly>
                        <inclusions>
                            <inclusion>
                                <groupId>${project.groupId}</groupId>
                                <artifactId>quartz</artifactId>
                            </inclusion>
                        </inclusions>
                    </assembly>
                    <!--输入的jar名-->
                    <injar>${project.build.finalName}.jar</injar>
                    <!--输出的jar名,当与injar相同时,会将混淆后的class文件放入jar中,源class文件放入项目名_proguard_base.jar中-->
                    <outjar>${project.build.finalName}.jar</outjar>
                    <!--混淆是默认开启的。混淆使类和类成员名称变成短的随机名，被各种“-keep”选项保护的类、类成员除外。对调试有用的内部属性（源文件名称，变量名称，行号）将被删除。-->
                    <obfuscate>true</obfuscate>
                    <options>
                        <!--指定java版本-->
                        <option>-target 1.8</option>
                        <!--忽略警告-->
                        <option>-ignorewarnings</option>
                        <!--排除依赖-->
                        <!-- 不做收缩（删除注释、未被引用代码）-->
                        <option>-dontshrink</option>
                        <!-- 不做优化（变更代码实现逻辑）-->
                        <option>-dontoptimize</option>
                        <!-- 确定统一的混淆类的成员名称来增加混淆-->
                        <option>-useuniqueclassmembernames</option>
                        <!--保护代码中的Annotation不被混淆，在使用如fastJSON时的实体映射-->
                        <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,
                            SourceFile,LineNumberTable,*Annotation*,EnclosingMethod
                        </option>
                        <!--混淆类名之后，对使用Class.forName('className')之类的地方进行相应替代-->
                        <option>-adaptclassstrings</option>
                        <!--保留启动类不混淆-->
                        <option>-keep class com.iflyrec.jk.application.TaskCenterApplication { *; }</option>
                        <!--保留实体类不混淆-->
                        <option>-keep class com.test.quartz.** { *; }</option>
                        <!--包名不混淆-->
                        <option>-keeppackagenames</option>
                        <!--参数名不混淆-->
                        <!--<option>-keepparameternames</option>-->
                        <!--getset不混淆-->
                        <!--<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>-->
                        <!--<option>-keep class !com.iflyrec.jk.** {*;}</option>-->
                        <!--<option>-keepclassmembers class * {-->
                        <!--@org.springframework.beans.factory.annotation.Autowired *;-->
                        <!--@org.springframework.beans.factory.annotation.Value *;-->
                        <!--}-->
                        <!--</option>-->
                    </options>
                    <!--必要的工具包-->
                    <libs>
                        <!-- Include main JAVA library required.-->
                        <lib>${java.home}/lib/rt.jar</lib>
                        <!--<lib>${java.home}/lib/jce.jar</lib>-->
                    </libs>
                </configuration>
                <!--依赖包-->
                <dependencies>
                    <!--proguard-->
                    <dependency>
                        <groupId>net.sf.proguard</groupId>
                        <artifactId>proguard-base</artifactId>
                        <version>6.0.3</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- Maven assembly must be run after proguard obfuscation so it take already obfuscated files.-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.2.2.RELEASE</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                        <configuration>
                            <!--指定主类-->
                            <mainClass>com.test.quartz.application.CenterApplication</mainClass>
                            <!--多模块项目打包重点二,需要在构建可执行jar包时去除加入混淆的子模块-->
                            <!--  <excludes>
                                  <exclude>
                                      <groupId>${project.groupId}</groupId>
                                      <artifactId>子模块名称</artifactId>
                                  </exclude>
                              </excludes>-->
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>6</source>
                    <target>6</target>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>